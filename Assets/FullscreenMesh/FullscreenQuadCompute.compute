#include "FramePredictionCommon.hlsl"
#pragma kernel FramePrediction
[numthreads(1,1,1)]
void FramePrediction (uint3 id : SV_DispatchThreadID)
{
    uint2 vertexIdx = id.xy;
    if(vertexIdx.x > (uint)gTilesInfo.x || vertexIdx.y > (uint)gTilesInfo.y)
        return;

    uint2 maxGradiantSqSumPixelIdx;
    float maxGradiantSqSum = 0;;
    for (uint j = 0; j < TILE_SIZE; j++)
        for (uint i = 0; i < TILE_SIZE; i++)
        {
            uint2 globalPixelIdx = vertexIdx*TILE_SIZE + uint2(i, j);
            float depth = LOAD_TEXTURE2D_X(_CameraDepthTexture, globalPixelIdx).r;
            
            float rightDepth = depth;
            if(globalPixelIdx.x + 1 < (uint)_ScreenSize.x)
                rightDepth = LOAD_TEXTURE2D_X(_CameraDepthTexture, globalPixelIdx + int2(1, 0)).r;
            float downDepth = depth;
            if(globalPixelIdx.y + 1 < (uint)_ScreenSize.y)
                downDepth = LOAD_TEXTURE2D_X(_CameraDepthTexture, globalPixelIdx + int2(0, 1)).r;
            float gradiantSqSum = (rightDepth - depth)*(rightDepth - depth) + (downDepth - depth)*(downDepth - depth);
            if(gradiantSqSum > maxGradiantSqSum)
            {
                maxGradiantSqSum = gradiantSqSum;
                maxGradiantSqSumPixelIdx = globalPixelIdx;
            }
            //Debug
            GradiantSqSumTexture[globalPixelIdx] = float4(gradiantSqSum * 1000, 0, 0, 1);
        }
    
    float4 clipPosAndUV;
    if(maxGradiantSqSum > 0)
        clipPosAndUV = CalculatePixelClipPosAndUV(maxGradiantSqSumPixelIdx);
    else
        clipPosAndUV = CalculateVertexClipPosAndUV(vertexIdx);
    float4 clipPos = float4(clipPosAndUV.xy, UNITY_NEAR_CLIP_VALUE, 1);
    
    float2 uv = clipPosAndUV.zw;
    //Debug
    VertexTexture[vertexIdx] = float4(clipPos.xyz, 1.0);
    if(vertexIdx.x == 0)
    {
        clipPos.x = -1;
        uv.x = 0;
    }
    if(vertexIdx.y == 0)
    {
        clipPos.y = 1;
        uv.y = 1;
    }
    if(vertexIdx.x == (uint)gTilesInfo.x)
    {
        clipPos.x = 1;
        uv.x = 1;
    }
    if(vertexIdx.y == (uint)gTilesInfo.y)
    {
        clipPos.y = -1;
        uv.y = 0;
    }
    uint vertexId = CalculateVertexID(vertexIdx);
    StoreVertexPos(vertexId, clipPos.xyz);
    StoreVertexUV(vertexId, uv);
}
